//GLSL version to use
#version 460

//size of a workgroup for compute
layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z = 1) in;

struct TransformationInput {
    float translation[3];
    float scale[3];
    float rotation[3];
};

struct TriangleBuffer {
    uint vertexIndices[3];
    vec2 UVcoords[2];
    uint materialIndex;
    uint transformationIndex;
};

struct SphereBuffer {
    TransformationInput transformation;
    float radius;
    uint materialIndex;
    uint flags;
};

#define ENGINE_ISACTIVE 2
#define ENGINE_EXISTS 1

struct MaterialBuffer {
    float roughness;
    float refraction;
    float metallic;
    vec4 color;
    bool isTexturePresent;
    uint textureIndex;
    bool isNormalPresent;
    uint normalIndex;
};

struct Sunlight {
    vec4 lightData;
    vec4 color;
};

//descriptor bindings for the pipeline
layout(rgba16f, set = 0, binding = 0) uniform image2D renderScreen;
// layout(binding = 2) readonly buffer triangles {
//     TriangleBuffer triangleData[];
// } Triangles;
layout(binding = 1) readonly buffer spheres {
    SphereBuffer Spheres[];
};
layout(binding = 2) readonly buffer transformations {
    TransformationInput Transformations[];
};

layout(constant_id = 3) const uint MATERIALCOUNT = 1;

layout(binding = 3) uniform materials {
    MaterialBuffer Materials[MATERIALCOUNT];
};

layout(binding = 4) uniform sun_u {
    Sunlight sunlight;
};

// layout(binding = 5) uniform sampler2DArray textures;
// layout(binding = 6) uniform sampler2DArray normals;

#define PI 3.14159

ivec2 imageRes = ivec2(imageSize(renderScreen));  


//Our viewport has (0,0) in the centre and (1,1) in the top right
mat4 GenerateTransformationMatrix(TransformationInput t) {
    vec3 s = vec3(sin(t.rotation[0]), sin(t.rotation[1]), sin(t.rotation[2]));
    vec3 c = vec3(cos(t.rotation[0]), cos(t.rotation[1]), cos(t.rotation[2]));
    mat4 result = mat4(
        t.scale[0]*c[1]*c[2], c[1]*s[2], s[1], 0,
        -s[0]*s[1]*c[2]-c[0]*s[2], t.scale[1]*(c[0]*c[2]-s[0]*s[1]*s[2]), s[0]*c[1], 0,
        s[0]*s[2]-c[0]*s[1]*c[2], -s[0]*c[2]-c[0]*s[1]*s[2], t.scale[2]*c[0]*c[1], 0,
        t.translation[0], t.translation[1], t.translation[2],1
    );
    return result;
}

vec3 ArrToVec3(float arr[3]) {
    return vec3(arr[0], arr[1], arr[2]);
}

mat4 ViewportScreenspace = GenerateTransformationMatrix(Transformations[0]);
mat4 ScreenspaceViewport = GenerateTransformationMatrix(Transformations[1]);

vec4 convertToViewportCoordinates(ivec2 p) {
    vec4 vec = vec4(p.xy, 2, 1);
    vec4 result = ScreenspaceViewport * vec;
    return result;
}

ivec2 convertToScreenCoordinates(vec4 p) {
    return ivec2(
        (ViewportScreenspace * vec4(p.xy/p.z, p.z, 1)).xy
    );
}

vec3 rayGenerate() {
    vec4 unnormalised_direction = convertToViewportCoordinates(ivec2(gl_GlobalInvocationID.xy));
    vec3 direction = normalize(unnormalised_direction.xyz);
    return direction;
}


#define OBJECT_NOTHING 0
#define OBJECT_SPHERE 1
#define OBJECT_PLANE 2
#define CASTRAY_MAX_LENGTH 20


struct CastRayResult {
    uint objectType;
    uint hitIndex;
    highp float hitLength;
    highp vec3 hitCoord;
};

vec3 planeNormal[2] = vec3[](
    normalize(vec3(0,1,0)), normalize(vec3(1,0,-1))
);
vec3 planeOrigin[2] = vec3[](
    vec3(0,-1,0), vec3(0,0,7)
);

const float minIntersection = 0.001;

CastRayResult castRay(vec3 rayOrigin, vec3 direction, uint IGNORE_FLAGS) {
    CastRayResult result = CastRayResult(
        OBJECT_NOTHING, 0, 20, vec3(0,0,0)
    );
    uint sphereIgnore = IGNORE_FLAGS & OBJECT_SPHERE;
    for(uint i = 0; i < Spheres.length() && sphereIgnore == 0; i++) {
        uint exists = Spheres[i].flags & ENGINE_EXISTS;
        uint isActive = Spheres[i].flags & ENGINE_ISACTIVE;
        if(exists == 0 || isActive == 0) {
            continue;
        }
        vec3 spherePos = ArrToVec3(Spheres[i].transformation.translation);
        float a = 1;
        float b = 2*dot(direction, rayOrigin-spherePos);
        float c = dot(spherePos-rayOrigin, spherePos-rayOrigin)-Spheres[i].radius * Spheres[i].radius;
        float discriminant = b*b-4*a*c;
        if(discriminant <= 0) {
            continue;
        }
        float intersectionDistance = (-b-sqrt(discriminant))/(2*a);
        float secondDistance = (-b+sqrt(discriminant))/(2*a);
        if(secondDistance < intersectionDistance && secondDistance > minIntersection) {
            intersectionDistance = secondDistance;
        }
        if(intersectionDistance <= minIntersection) {
            continue;
        }
        if(intersectionDistance < result.hitLength) {
            result.hitLength = intersectionDistance;
            result.objectType = OBJECT_SPHERE;
            result.hitIndex = i;
            result.hitCoord = rayOrigin + intersectionDistance * direction;
        }
    }

    //TEMPORARY
    for(uint i = 0; i < 2; i++) {
        float nd = dot(planeNormal[i], direction);
        if(nd >= 0) {
            continue;
        }
        float intersectionDistance = dot(planeNormal[i], planeOrigin[i] - rayOrigin)/nd;
        if(intersectionDistance < result.hitLength) {
            result.hitCoord = rayOrigin + direction * intersectionDistance;
            result.hitLength = intersectionDistance;
            result.objectType = OBJECT_PLANE;
            result.hitIndex = i;
        }
    }

    return result;
}

const float minLuminosity = 0.05;

float rand(vec2 co, float seed){
  return fract(sin(dot(co * seed, vec2(12.9898,78.233))) * 43758.5453);
}

layout(binding = 5) uniform misc {
    float initialSeed;
    uint maxRays;
};

MaterialBuffer getMaterial(CastRayResult hitObj) {
    MaterialBuffer material;
    switch(hitObj.objectType) {
        case OBJECT_PLANE:
            if(hitObj.hitIndex == 0) {
                material.color = vec4(1,1,0,1);
                material.metallic = 0;
                material.roughness = 0.8;
                material.refraction = 0;
            } else {
                material.color = vec4(1,0,0.75,1);
                material.metallic = 0;
                material.roughness = 0.7;
                material.refraction = 0;
            }

            break;
        case OBJECT_SPHERE:
            material = Materials[Spheres[hitObj.hitIndex].materialIndex]; 
            break;
        case OBJECT_NOTHING:
            break;
    }
    return material;
}

vec3 getNormal(CastRayResult hitObj) {
    vec3 normal;
    switch(hitObj.objectType) {
        case OBJECT_PLANE:
            normal = planeNormal[hitObj.hitIndex];
            break;
        case OBJECT_SPHERE:
            vec3 spherePos = ArrToVec3(Spheres[hitObj.hitIndex].transformation.translation);
            normal = normalize(hitObj.hitCoord - spherePos);
            break;
        case OBJECT_NOTHING:
            return vec3(0,0,0);
    }
    return normal;
}

const vec3 lightData = vec3(1,1,1);

vec4 calculateColor(uint rayDepth, CastRayResult hitObj) {
    if(hitObj.objectType == OBJECT_NOTHING) {
        return vec4(-1,-1,-1,-1);
    }
    MaterialBuffer material = getMaterial(hitObj);
    vec3 normal = getNormal(hitObj);
    vec4 color = material.color * minLuminosity;
    CastRayResult shadowRay = castRay(hitObj.hitCoord + vec3(1,1,1) * minIntersection, -normalize(sunlight.lightData.xyz), OBJECT_NOTHING);
    if(shadowRay.objectType == OBJECT_NOTHING) {
        float luminosity = clamp(-dot(normal, sunlight.lightData.xyz),0,1) * sunlight.lightData.w;
        vec4 diffuseComponent = material.color * normalize(sunlight.color) * luminosity; 
        color += diffuseComponent;// * material.roughness
    }
    return color;
}

const uint MAX_RAYS_SIZE = 20;

void main() {
    uint rayCount = 0;
    CastRayResult rayPath[MAX_RAYS_SIZE];
    float weight[MAX_RAYS_SIZE];
    weight[0] = 1;

    highp vec3 rayOrigin = vec3(0,0,0);
    highp vec3 rayDir = rayGenerate();
    vec4 color = vec4(0.5,0.5,0.5,1);

    float seed = initialSeed;    
    for(;rayCount < maxRays; rayCount++) {
        rayPath[rayCount] = castRay(rayOrigin, rayDir, OBJECT_NOTHING);
        weight[rayCount] = 1; //later i will have absoprtion parameter for this
        if(rayPath[rayCount].objectType == OBJECT_NOTHING) {
            break;
        }
        MaterialBuffer material = getMaterial(rayPath[rayCount]);
        weight[rayCount] = 1-material.roughness; 
        vec3 normal = getNormal(rayPath[rayCount]);
        vec3 incomingDir = -rayDir;
        vec3 differenceVector = normalize(normal - incomingDir);
        vec3 perpVector = normalize(cross(normal, incomingDir));
        seed = rand(rayPath[rayCount].hitCoord.xy, seed);
        float randValue1 = dot(incomingDir, normal)*(2*seed-1);
        seed = rand(rayPath[rayCount].hitCoord.xy, seed);
        float randValue2 = dot(incomingDir, normal)*(2*seed-1);

        vec3 roughDir = normalize(normal + (differenceVector * randValue1 + perpVector * randValue2));
        vec3 perfectDir = reflect(rayDir, normal);

        rayDir = mix(perfectDir, roughDir, material.roughness);
        rayOrigin = rayPath[rayCount].hitCoord;
        rayOrigin += vec3(1,1,1) * sign(dot(normal, incomingDir)) * minIntersection;
    }
    if(rayCount == 0) {
        return;
    }
    rayCount = min(rayCount, maxRays-1);
    while(rayCount < maxRays) {
        color *= weight[rayCount];
        if(rayPath[rayCount].objectType != OBJECT_NOTHING) {
            vec4 curColor = calculateColor(rayCount, rayPath[rayCount]);
            color = mix(curColor, color, weight[rayCount]);
        }
        rayCount--;
    }
    imageStore(renderScreen, ivec2(gl_GlobalInvocationID), color);
}