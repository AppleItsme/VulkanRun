//GLSL version to use
#version 460

//size of a workgroup for compute
layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z = 1) in;

struct TransformationInput {
    float translation[3];
    float scale[3];
    float rotation[3];
};

struct TriangleBuffer {
    uint vertexIndices[3];
    vec2 UVcoords[2];
    uint materialIndex;
    uint transformationIndex;
};

struct SphereBuffer {
    TransformationInput transformation;
    float radius;
    uint materialIndex;
    uint flags;
};

struct Ray {
    highp vec3 origin;
    highp vec3 direction;
};

#define ENGINE_ISACTIVE 2
#define ENGINE_EXISTS 1

struct MaterialBuffer {
    float roughness;
    float refraction;
    float metallic;
    vec4 color;
    bool isTexturePresent;
    uint textureIndex;
    bool isNormalPresent;
    uint normalIndex;
};

struct Sunlight {
    vec4 lightData;
    vec4 color;
};

//descriptor bindings for the pipeline
layout(rgba16f, set = 0, binding = 0) uniform image2D renderScreen;
// layout(binding = 2) readonly buffer triangles {
//     TriangleBuffer triangleData[];
// } Triangles;
layout(binding = 1) readonly buffer spheres {
    SphereBuffer Spheres[];
};
layout(binding = 2) readonly buffer transformations {
    TransformationInput Transformations[];
};

layout(constant_id = 3) const uint MATERIALCOUNT = 1;

layout(binding = 3) uniform materials {
    MaterialBuffer Materials[MATERIALCOUNT];
};

layout(binding = 4) uniform sun_u {
    Sunlight sunlight;
};

// layout(binding = 5) uniform sampler2DArray textures;
// layout(binding = 6) uniform sampler2DArray normals;

#define PI 3.14159

ivec2 imageRes = ivec2(imageSize(renderScreen));  

//Our viewport has (0,0) in the centre and (1,1) in the top right
mat4 GenerateTransformationMatrix(TransformationInput t) {
    vec3 s = vec3(sin(t.rotation[0]), sin(t.rotation[1]), sin(t.rotation[2]));
    vec3 c = vec3(cos(t.rotation[0]), cos(t.rotation[1]), cos(t.rotation[2]));
    mat4 result = mat4(
        t.scale[0]*c.y*c.z, -s.x*s.y*c.z - c.x*s.y, s.x*s.z - c.x*s.y*c.z, t.translation[0],
        c.y*s.x, t.scale[1]*(c.x*c.z - s.x*s.y*s.z), -s.x*c.z - c.x*s.y*s.z, t.translation[1],
        s.y, s.x*c.y, t.scale[2]*c.x*c.y, t.translation[2],
        0,0,0,1
    );
    return transpose(result);
}

vec3 ArrToVec3(float arr[3]) {
    return vec3(arr[0], arr[1], arr[2]);
}

mat4 ViewportScreenspace = GenerateTransformationMatrix(Transformations[0]);
mat4 ScreenspaceViewport = GenerateTransformationMatrix(Transformations[1]);

vec4 convertToViewportCoordinates(ivec2 p) {
    vec4 vec = vec4(p.xy, 2, 1);
    vec4 result = ScreenspaceViewport * vec;
    return result;
}

ivec2 convertToScreenCoordinates(vec4 p) {
    return ivec2(
        (ViewportScreenspace * vec4(p.xy/p.z, p.z, 1)).xy
    );
}

#define OBJECT_NOTHING 0
#define OBJECT_SPHERE 1
#define OBJECT_PLANE 2
#define CASTRAY_MAX_LENGTH 20


struct CastRayResult {
    uint objectType;
    uint hitIndex;
    highp float hitLength;
    highp vec3 hitCoord;
};

vec3 planeNormal[2] = vec3[](
    normalize(vec3(0,1,0)), normalize(vec3(0,0,-1))
);
vec3 planeOrigin[2] = vec3[](
    vec3(0,-1,0), vec3(0,0,7)
);

const float minIntersection = 0.005;
const float minOffset = minIntersection * 2;

CastRayResult castRay(Ray ray, uint IGNORE_FLAGS) {
    CastRayResult result = CastRayResult(
        OBJECT_NOTHING, 0, 50, vec3(0,0,0)
    );
    uint sphereIgnore = IGNORE_FLAGS & OBJECT_SPHERE;
    for(uint i = 0; i < Spheres.length() && sphereIgnore == 0; i++) {
        uint exists = Spheres[i].flags & ENGINE_EXISTS;
        uint isActive = Spheres[i].flags & ENGINE_ISACTIVE;
        if(exists == 0 || isActive == 0) {
            continue;
        }
        vec3 spherePos = ArrToVec3(Spheres[i].transformation.translation);
        float a = 1;
        float b = 2*dot(ray.direction, ray.origin-spherePos);
        float c = dot(spherePos-ray.origin, spherePos-ray.origin)-Spheres[i].radius * Spheres[i].radius;
        float discriminant = b*b-4*a*c;
        if(discriminant <= 0) {
            continue;
        }
        float intersectionDistance = (-b-sqrt(discriminant))/(2*a);
        float secondDistance = (-b+sqrt(discriminant))/(2*a);
        if((secondDistance < intersectionDistance || intersectionDistance < minIntersection) && secondDistance > 0) {
            intersectionDistance = secondDistance;
        }
        if(intersectionDistance < minIntersection) {
            continue;
        }
        if(intersectionDistance < result.hitLength) {
            result.hitLength = intersectionDistance;
            result.objectType = OBJECT_SPHERE;
            result.hitIndex = i;
            result.hitCoord = ray.origin + intersectionDistance * ray.direction;
        }
    }

    //TEMPORARY
    for(uint i = 0; i < 1; i++) {
        float nd = dot(planeNormal[i], ray.direction);
        if(nd >= 0) {
            continue;
        }
        float intersectionDistance = dot(planeNormal[i], planeOrigin[i] - ray.origin)/nd;
        if(intersectionDistance < minIntersection) {
            continue;
        }
        if(intersectionDistance < result.hitLength) {
            result.hitCoord = ray.origin + ray.direction * intersectionDistance;
            result.hitLength = intersectionDistance;
            result.objectType = OBJECT_PLANE;
            result.hitIndex = i;
        }
    }

    return result;
}

const float minLuminosity = 0.05;

layout(binding = 5) uniform misc {
    highp uint initialSeed;
    uint maxRays;
};


const float UINT32_MAX = float(uint(0xFFFFFFFF));

highp uint seed = uint(initialSeed * gl_GlobalInvocationID.x * gl_GlobalInvocationID.y);

struct RandomResult {
    highp float val;
    highp uint seed;
};

RandomResult rand(highp uint seed) {
    highp uint state =  seed * uint(747796405) + uint(2891336453);
    highp uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);
    seed = (word >> uint(22)) ^ word;
    return RandomResult(float(seed)/UINT32_MAX, seed);
}


struct CameraBuffer {
    float origin[3];
    float lookDirection[3];
};

layout(binding = 6) readonly buffer cam_b {
    CameraBuffer camera;
};

MaterialBuffer getMaterial(CastRayResult hitObj) {
    MaterialBuffer material;
    material.color = vec4(-1,-1,-1,-1);
    switch(hitObj.objectType) {
        case OBJECT_PLANE:
            if(hitObj.hitIndex == 0) {
                material.color = vec4(1,1,0,1);
                material.metallic = 0;
                material.roughness = 0.8;
                material.refraction = 0;
            } else {
                material.color = vec4(1,0,0.75,1);
                material.metallic = 0;
                material.roughness = 0.7;
                material.refraction = 0;
            }
            break;
        case OBJECT_SPHERE:
            material = Materials[Spheres[hitObj.hitIndex].materialIndex]; 
            break;
        case OBJECT_NOTHING:
            break;
    }
    return material;
}

vec3 getNormal(CastRayResult hitObj) {
    vec3 normal;
    switch(hitObj.objectType) {
        case OBJECT_PLANE:
            normal = planeNormal[hitObj.hitIndex];
            break;
        case OBJECT_SPHERE:
            vec3 spherePos = ArrToVec3(Spheres[hitObj.hitIndex].transformation.translation);
            normal = normalize(hitObj.hitCoord - spherePos);
            break;
        case OBJECT_NOTHING:
            return vec3(0,0,0);
    }
    return normal;
}

const uint MAX_RAYS_BOUNCE_SIZE = 20;
const uint MAX_SHADOW_RAYS_SIZE = 1;
const uint MAX_SHADOW_RAYS_BOUNCE_SIZE = 6;
const float WEIGHT_THRESHOLD = 0.1;
const float worldEta = 1;

Ray rayGenerate() {
    vec4 original_dir = convertToViewportCoordinates(ivec2(gl_GlobalInvocationID.xy));
    vec3 front = ArrToVec3(camera.lookDirection);
    vec3 up = vec3(0,1,0);
    vec3 right = normalize(cross(up, front));
    up = normalize(cross(front, right));

    vec3 direction = normalize(original_dir.x * right + original_dir.y * up + original_dir.z * front);
    return Ray(
        ArrToVec3(camera.origin), direction
    );
}

float getReflectance(vec3 rayDir, vec3 normal, float curEta, float refractionIndex, float metallic) {
    float r0 = (curEta-refractionIndex) / (curEta+refractionIndex);
    r0 *= r0;
    float cosX = -dot(normal, rayDir);
    if (curEta > refractionIndex)
    {
        float n = curEta/refractionIndex;
        float sinT2 = n*n*(1.0-cosX*cosX);
        // Total internal reflection
        if (sinT2 > 1.0)
            return 1.0;
        cosX = sqrt(1.0-sinT2);
    }
    float x = 1.0-cosX;
    float ret = r0+(1.0-r0)*x*x*x*x*x;

    // adjust reflect multiplier for object reflectivity
    ret = (metallic + (1.0-metallic) * ret);
    return ret;
}

struct RayBounceResult {
    Ray reflectRay;
    Ray refractRay;
    bool refracted;
    bool frontFace;
    float reflectance;
};

RandomResult res;

RayBounceResult calculateRayBounce(Ray incomingRay, CastRayResult hit, float currentRefraction) {
    RayBounceResult result;
   
    vec3 normal = getNormal(hit);
    vec3 incomingDir = -incomingRay.direction;
    result.frontFace = dot(incomingDir, normal) >= 0;
    if(!result.frontFace) {
        normal *= -1;
    }
    vec3 differenceVector = normalize(normal - incomingDir);
    vec3 perpVector = normalize(cross(normal, incomingDir));
    res = rand(res.seed);
    float randValue1 = dot(incomingDir, normal)*(2*res.val-1);
    res = rand(res.seed);
    float randValue2 = dot(incomingDir, normal)*(2*res.val-1);
    vec3 roughDir = normalize(normal + (differenceVector * randValue1 + perpVector * randValue2));

    MaterialBuffer material = getMaterial(hit);

    res = rand(res.seed);
    vec3 refractDir = vec3(0,0,0);
    if(res.val >= material.metallic && material.refraction != 0) {
        result.reflectance = getReflectance(incomingRay.direction, normal, currentRefraction, material.refraction, material.metallic);
        currentRefraction /= material.refraction;
        refractDir = normalize(refract(incomingRay.direction, normal, currentRefraction));
    }
    result.refracted = refractDir != vec3(0,0,0);
    vec3 reflectDir = normalize(reflect(incomingRay.direction, normal));

    result.reflectRay.direction = mix(reflectDir, roughDir, material.roughness);
    result.reflectRay.origin = hit.hitCoord + normal * minOffset;

    result.refractRay.direction = mix(refractDir, roughDir, material.roughness);
    result.refractRay.origin = hit.hitCoord - normal * minOffset;
    return result;
}

vec4 calculateColor(CastRayResult hitObj, float refractionStack[MAX_RAYS_BOUNCE_SIZE], uint refractionCount) {
    if(hitObj.objectType == OBJECT_NOTHING) {
        return vec4(-1,-1,-1,-1);
    }
    MaterialBuffer material = getMaterial(hitObj);
    vec3 normal = getNormal(hitObj);
    vec4 color = material.color * minLuminosity;
    vec3 sunDir = normalize(sunlight.lightData.xyz);

    Ray shadowRay = Ray(
        hitObj.hitCoord + normal * minOffset, -sunDir
    );
    CastRayResult shadowRayHit;
    float accumulatedWeight = 1;

    for(uint shadowRayCount = 0; shadowRayCount < MAX_SHADOW_RAYS_BOUNCE_SIZE; shadowRayCount++) {
        shadowRayHit = castRay(shadowRay, OBJECT_NOTHING);
        float curWeight = clamp(dot(shadowRay.direction, -sunDir), 0,1);
        if(shadowRayHit.objectType == OBJECT_NOTHING) {
            accumulatedWeight *= curWeight;
            break;
        }
        MaterialBuffer material = getMaterial(shadowRayHit);
        curWeight *= 1-material.roughness;
        accumulatedWeight *= curWeight;
        if(accumulatedWeight <= WEIGHT_THRESHOLD) {
            break;
        }
        Ray candidateRays[2];
        float curEta = refractionCount > 0 ? refractionStack[refractionCount-1] : worldEta;

        RayBounceResult rayBounce = calculateRayBounce(shadowRay, shadowRayHit, curEta);
        candidateRays[0] = rayBounce.reflectRay;
        candidateRays[1] = rayBounce.refractRay;
        res = rand(res.seed);
        uint chosenRay = uint(rayBounce.refracted); // && rayBounce.reflectance <= res.val
        if(chosenRay == 1) {
            if(refractionCount > 0) {
                refractionCount--;
            } else if (rayBounce.frontFace){
                refractionStack[refractionCount] = material.refraction;
                refractionCount++;
            }
        }
        shadowRay = candidateRays[chosenRay];
    }
    float sunLuminosity = clamp(-dot(normal, sunDir),0,1) * (minLuminosity + sunlight.lightData.w) * accumulatedWeight;
    vec4 diffuseComponent = material.color * normalize(sunlight.color) * sunLuminosity;
    color += diffuseComponent;
    
    return color;
}

void main() {
    CastRayResult rayPath[MAX_RAYS_BOUNCE_SIZE];
    float weight[MAX_RAYS_BOUNCE_SIZE];
    float accumulatedWeight = 1;
    float refractionStack[MAX_RAYS_BOUNCE_SIZE];
    uint refractionCount = 0;

    weight[0] = 1;
    Ray mainRay = rayGenerate();

    vec4 color = vec4(0.1,0.5,0.9,1);
    uint seed = uint(gl_GlobalInvocationID.y * imageRes.x + gl_GlobalInvocationID.x) * initialSeed;
    res = rand(seed);

    uint rayCount = 0;
    for(;rayCount < maxRays; rayCount++) {
        weight[rayCount] = 1;
        rayPath[rayCount] = castRay(mainRay, OBJECT_NOTHING);
        if(rayPath[rayCount].objectType == OBJECT_NOTHING) {
            break;
        }
        MaterialBuffer material = getMaterial(rayPath[rayCount]);
        weight[rayCount] = 1-material.roughness;
        accumulatedWeight *= weight[rayCount];
        if(accumulatedWeight <= WEIGHT_THRESHOLD) {
            rayCount++;
            break;
        }
        Ray candidateRays[2];
        uint chosenRay = 0;
        float curEta = refractionCount > 0 ? refractionStack[refractionCount-1] : worldEta;

        RayBounceResult rayBounce = calculateRayBounce(mainRay, rayPath[rayCount], curEta);
        candidateRays[0] = rayBounce.reflectRay;
        candidateRays[1] = rayBounce.refractRay;
        res = rand(res.seed);
        chosenRay = uint(rayBounce.refracted && rayBounce.reflectance <= res.val);
        if(chosenRay == 1) {
            if(refractionCount > 0) {
                refractionCount--;
            } else if (rayBounce.frontFace) {
                refractionStack[refractionCount] = material.refraction;
                refractionCount++;
            }
        }
        mainRay = candidateRays[chosenRay];
    }

    if(rayCount == 0) {
        return;
    }
    rayCount = min(rayCount, maxRays-1);
    while(rayCount < maxRays) {
        color *= weight[rayCount];
        if(rayPath[rayCount].objectType == OBJECT_NOTHING) {
            rayCount--;
            continue;
        }
        vec4 curColor = calculateColor(rayPath[rayCount], refractionStack, refractionCount);
        color = mix(curColor, color, weight[rayCount]);
        rayCount--;
    }
    imageStore(renderScreen, ivec2(gl_GlobalInvocationID), color);
}